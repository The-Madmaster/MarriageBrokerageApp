// User.java
package com.marriagebureau.usermanagement.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity // Marks this class as a JPA entity, mapping it to a database table named 'user'
public class User {

    @Id // Specifies the primary key of the entity
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the primary key to be auto-generated by the database (e.g., auto-increment in MySQL)
    private Long id;

    @Column(nullable = false, length = 100) // Maps to a database column, ensures it's not null, and sets max length
    private String name;

    @Column(nullable = false, unique = true, length = 100) // Ensures email is unique across all users and not null
    private String email;

    @Column(nullable = false) // Important: This field will store hashed passwords, not plain text!
    private String password;

    @Column(length = 20) // Sets max length for contact number
    private String contactNumber;

    @Enumerated(EnumType.STRING) // Stores the enum's name (e.g., "BROKER", "ADMIN") as a string in the database
    @Column(nullable = false)
    private Role role; // Added to differentiate between brokers and administrators

    // Enum to define the possible roles for users in the system
    public enum Role {
        BROKER,
        ADMIN
    }

    // Default constructor is required by JPA. Don't remove it!
    public User() {
    }

    // Constructor for easier object creation
    public User(String name, String email, String password, String contactNumber, Role role) {
        this.name = name;
        this.email = email;
        this.password = password;
        this.contactNumber = contactNumber;
        this.role = role;
    }

    // --- Getters and Setters ---
    // These methods allow access to and modification of the private fields.
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getContactNumber() {
        return contactNumber;
    }

    public void setContactNumber(String contactNumber) {
        this.contactNumber = contactNumber;
    }

    public Role getRole() {
        return role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    // --- toString() Method ---
    // Useful for debugging and logging, provides a readable representation of the object.
    // Note: It's good practice to exclude sensitive information like passwords from toString().
    @Override
    public String toString() {
        return "User{" +
               "id=" + id +
               ", name='" + name + '\'' +
               ", email='" + email + '\'' +
               ", contactNumber='" + contactNumber + '\'' +
               ", role=" + role +
               '}';
    }
}