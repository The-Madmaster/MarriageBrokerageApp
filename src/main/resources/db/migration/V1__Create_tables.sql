-- src/main/resources/db/migration/V1__Create_tables.sql

-- 1. Create the app_users table (parent table) FIRST
-- This table is critical as it's the core user entity.
CREATE TABLE app_users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- H2 auto-incrementing primary key
    username VARCHAR(255) UNIQUE,                          -- Added: Ensure this matches AppUser entity if present
    email VARCHAR(255) NOT NULL UNIQUE,                    -- Email is typically unique and non-null
    password VARCHAR(255) NOT NULL,
    contact_number VARCHAR(20),                            -- Added: Matches common DTO/entity fields
    role VARCHAR(50) NOT NULL DEFAULT 'ROLE_USER',         -- Using VARCHAR for single role string, with default
    enabled BOOLEAN NOT NULL DEFAULT TRUE,                 -- Account status
    created_date TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, -- Auto-filled on creation
    last_updated_date TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL -- Auto-updated on modification
);
-- Add index for frequently queried columns if needed, e.g., email
CREATE INDEX idx_app_users_email ON app_users (email);

-- 2. Create the user_roles table (if using a separate table for roles, often for many-to-many)
-- If your 'AppUser' entity directly stores a single 'role' string/enum, you might not need this table.
-- However, since you included it, we'll keep it. This typically represents a many-to-many relationship
-- where 'role_name' might map to a Spring Security GrantedAuthority.
CREATE TABLE user_roles (
    user_id BIGINT NOT NULL,
    role_name VARCHAR(50) NOT NULL, -- e.g., 'ROLE_USER', 'ROLE_ADMIN'
    PRIMARY KEY (user_id, role_name),
    FOREIGN KEY (user_id) REFERENCES app_users(id) ON DELETE CASCADE
);

-- 3. Create the profiles table (child table linked to app_users)
CREATE TABLE profiles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- H2 auto-incrementing primary key
    app_user_id BIGINT NOT NULL UNIQUE,                    -- Foreign key to app_users, must be unique (one profile per user)
    full_name VARCHAR(255) NOT NULL,
    date_of_birth DATE,
    gender VARCHAR(10),
    religion VARCHAR(50),
    marital_status VARCHAR(20),
    occupation VARCHAR(100),
    income_level VARCHAR(50),
    education VARCHAR(100),
    city VARCHAR(100),
    state VARCHAR(100),
    country VARCHAR(100),
    phone_number VARCHAR(20),
    bio TEXT,
    profile_picture_url VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE NOT NULL,
    created_date TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_updated_date TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (app_user_id) REFERENCES app_users(id) ON DELETE CASCADE
);
-- Add index for the foreign key
CREATE INDEX idx_profiles_app_user_id ON profiles (app_user_id);


-- 4. Create the preferences table (child table linked to app_users)
CREATE TABLE preferences (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- H2 auto-incrementing primary key
    user_id BIGINT NOT NULL UNIQUE,                       -- Foreign key to app_users, must be unique (one preferences per user)
    preferred_age_min INTEGER,
    preferred_age_max INTEGER,
    preferred_gender VARCHAR(10),
    preferred_religion VARCHAR(50),
    preferred_marital_status VARCHAR(20),
    preferred_city VARCHAR(100),
    preferred_state VARCHAR(100),
    preferred_country VARCHAR(100),
    created_date TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_updated_date TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES app_users(id) ON DELETE CASCADE
);
-- Add index for the foreign key
CREATE INDEX idx_preferences_user_id ON preferences (user_id);

-- 5. Continue with any other table creations (matches, messages, payments, notifications)
-- Ensure any tables with foreign keys also follow the parent-first rule.
-- Example of another table:
/*
CREATE TABLE matches (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user1_id BIGINT NOT NULL,
    user2_id BIGINT NOT NULL,
    match_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    status VARCHAR(50) DEFAULT 'PENDING' NOT NULL, -- e.g., PENDING, ACCEPTED, REJECTED
    FOREIGN KEY (user1_id) REFERENCES app_users(id) ON DELETE CASCADE,
    FOREIGN KEY (user2_id) REFERENCES app_users(id) ON DELETE CASCADE,
    UNIQUE (user1_id, user2_id) -- Ensures only one match entry between two users
);
CREATE INDEX idx_matches_user1_id ON matches (user1_id);
CREATE INDEX idx_matches_user2_id ON matches (user2_id);
*/