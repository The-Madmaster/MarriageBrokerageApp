-- src/main/resources/db/migration/V1__Create_tables.sql

-- 1. Create the app_users table (parent table) FIRST
CREATE TABLE app_users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(255) UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    contact_number VARCHAR(20),
    role VARCHAR(255), -- Consider using an enum or a separate roles table in Java for better type safety
    enabled BOOLEAN NOT NULL DEFAULT TRUE,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. Create the user_roles table (if using a separate table for roles and a many-to-many relationship)
-- This table is often used when an AppUser can have multiple roles, or a role can apply to multiple users.
-- If `role` in `app_users` is sufficient, this table might not be needed.
CREATE TABLE user_roles (
    user_id BIGINT NOT NULL,
    role_name VARCHAR(50) NOT NULL,
    PRIMARY KEY (user_id, role_name),
    FOREIGN KEY (user_id) REFERENCES app_users(id) ON DELETE CASCADE
);

-- 3. Create the profiles table (child table) SECOND
-- Aligning column names to match common Spring JPA snake_case convention for `Profile` entity fields.
CREATE TABLE profiles (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    app_user_id BIGINT NOT NULL UNIQUE, -- Foreign key linking to app_users table
    full_name VARCHAR(255) NOT NULL, -- Matches Profile.java `fullName`
    date_of_birth DATE, -- Matches Profile.java `dateOfBirth`
    gender VARCHAR(20), -- Matches Profile.java `gender` enum string
    marital_status VARCHAR(50), -- Matches Profile.java `maritalStatus` enum string
    height_cm INTEGER, -- Matches Profile.java `heightCm`
    religion VARCHAR(100), -- Matches Profile.java `religion`
    caste VARCHAR(100), -- Matches Profile.java `caste`
    sub_caste VARCHAR(100), -- Matches Profile.java `subCaste`
    mother_tongue VARCHAR(50), -- Matches Profile.java `motherTongue` enum string
    country VARCHAR(100), -- Matches Profile.java `country`
    state VARCHAR(100), -- Matches Profile.java `state`
    city VARCHAR(100), -- Matches Profile.java `city`
    complexion VARCHAR(50), -- Matches Profile.java `complexion` enum string
    body_type VARCHAR(50), -- Matches Profile.java `bodyType` enum string
    education VARCHAR(255), -- Matches Profile.java `education`
    occupation VARCHAR(255), -- Matches Profile.java `occupation`
    annual_income DOUBLE PRECISION, -- Matches Profile.java `annualIncome` (using DOUBLE PRECISION for floating point numbers)
    diet VARCHAR(50), -- Matches Profile.java `diet` enum string
    smoking_habit VARCHAR(50), -- Matches Profile.java `smokingHabit` enum string
    drinking_habit VARCHAR(50), -- Matches Profile.java `drinkingHabit` enum string
    about_me VARCHAR(1000), -- Matches Profile.java `aboutMe` with a larger length
    photo_url VARCHAR(255), -- Matches Profile.java `photoUrl`
    is_active BOOLEAN DEFAULT TRUE, -- Matches Profile.java `isActive` with a default
    preferred_partner_min_age INTEGER, -- Matches Profile.java `preferredPartnerMinAge`
    preferred_partner_max_age INTEGER, -- Matches Profile.java `preferredPartnerMaxAge`
    preferred_partner_religion VARCHAR(100), -- Matches Profile.java `preferredPartnerReligion`
    preferred_partner_caste VARCHAR(100), -- Matches Profile.java `preferredPartnerCaste`
    preferred_partner_min_height_cm INTEGER, -- Matches Profile.java `preferredPartnerMinHeightCm`
    preferred_partner_max_height_cm INTEGER, -- Matches Profile.java `preferredPartnerMaxHeightCm`
    FOREIGN KEY (app_user_id) REFERENCES app_users(id) ON DELETE CASCADE
);


-- 4. Create the preferences table (assuming it's a separate entity for user preferences)
-- Note: Many of these columns are now also present in the `profiles` table.
-- You might want to **re-evaluate if `preferences` table is still needed**
-- or if its fields should be merged directly into the `profiles` table.
-- Given your `Profile.java` already includes preferred partner criteria,
-- it suggests these fields are intended to be part of the `Profile` entity.
CREATE TABLE preferences (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT NOT NULL UNIQUE,
    preferred_age_min INTEGER,
    preferred_age_max INTEGER,
    preferred_gender VARCHAR(10),
    preferred_religion VARCHAR(50),
    preferred_marital_status VARCHAR(20),
    preferred_city VARCHAR(100),
    preferred_state VARCHAR(100),
    preferred_country VARCHAR(100),
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES app_users(id) ON DELETE CASCADE
);